Here is the step-by-step explanation of the Java code conversion from the COBOL program:

1. **Understand the COBOL Program Functionality**: The COBOL program maintains customer records, allowing users to query by customer ID and display details. It handles file operations, input validation, and error messages.

2. **Choose Data Structures**: Since Java doesn't support indexed files natively, use a HashMap to simulate record storage for quick access by customer ID.

3. **Design the Customer Class**: Create a Customer class to encapsulate customer data with appropriate fields and accessor methods.

4. **Implement Data Access Object (DAO)**: Develop a CustomerDAO class to handle loading, storing, and retrieving customer records, using a HashMap for in-memory storage and file I/O for persistence.

5. **Set Up the Main Processing Class**: The CustomerMaintenance class will manage user input, interact with the DAO, and handle the program flow, including loops for continuous processing and exit conditions.

6. **Handle File Operations**: Use Java's File and Scanner classes to read and write customer records from a file, ensuring data persistence between sessions.

7. **Implement Error Handling**: Check for file open errors and customer not found conditions, displaying appropriate messages to the user.

8. **Convert COBOL Logic to Java**: Translate the COBOL paragraphs into Java methods, ensuring that the processing loop, record retrieval, and display logic are accurately replicated.

9. **Ensure Clean Code Practices**: Use generics, separate concerns with DAO, and follow Java naming conventions for classes and methods.

10. **Test the Application**: Verify that the Java program behaves as expected, handling all specified business rules and user interactions correctly.

The final Java code consists of three classes: Customer, CustomerDAO, and CustomerMaintenance, each encapsulating their respective responsibilities, providing a clean and maintainable solution.